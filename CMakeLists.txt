project (GLTRIANGLE C)
cmake_minimum_required(VERSION 2.8.9)

set(GLTRIANGLE_VERSION_MAJOR "0")
set(GLTRIANGLE_VERSION_MINOR "1")
set(GLTRIANGLE_VERSION "${GLTRIANGLE_VERSION_MAJOR}.${GLTRIANGLE_VERSION_MINOR}")

option(BUILD_SHARED_LIBS "Build shared libraries" ON)
option(NINJA_MODE "Enable all warnings" ON)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

list(APPEND GLTRIANGLE_HEADERS "inc/config.h")
list(APPEND GLTRIANGLE_INCLUDE_DIRS "inc")

find_package(OpenGL REQUIRED)
list(APPEND GLTRIANGLE_INCLUDE_DIRS ${OPENGL_INCLUDE_DIR})
list(APPEND GLTRIANGLE_LIBRARIES ${OPENGL_gl_LIBRARY})

add_subdirectory("eglproxy")
list(APPEND GLTRIANGLE_LIBRARIES "eglproxy")
list(APPEND GLTRIANGLE_INCLUDE_DIRS "eglproxy/inc")


list(APPEND GLTRIANGLE_SOURCES "src/main.c")
if (UNIX AND NOT APPLE)
    add_definitions(-DHAVE_CONFIG_H)
    find_package(X11 REQUIRED)
    list(APPEND GLTRIANGLE_INCLUDE_DIRS ${X11_X11_INCLUDE_PATH})
    list(APPEND GLTRIANGLE_LIBRARIES ${X11_X11_LIB})
    list(APPEND GLTRIANGLE_SOURCES "src/kd_core_unix.c")
elseif(WIN32)
    add_definitions(-DUNICODE -D_UNICODE)
    list(APPEND GLTRIANGLE_SOURCES "src/kd_core_win32.c")
endif()

if(NOT BUILD_SHARED_LIBS)
    add_definitions(-DEGLPROXY_STATIC)
endif()
if(NINJA_MODE)
    if (CMAKE_C_COMPILER_ID MATCHES "^GNU$")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=c89 -pedantic -Wall -Wextra -Wformat-nonliteral -Wformat-security -Wformat-y2k -Winit-self -Wmissing-include-dirs -Wswitch-default -Wswitch-enum -Wsync-nand -Wstrict-overflow=5 -Wtrampolines -Wfloat-equal -Wdeclaration-after-statement -Wundef -Wshadow -Wunsafe-loop-optimizations -Wbad-function-cast -Wc++-compat -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wsign-conversion -Wlogical-op -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnormalized=nfc -Wredundant-decls -Wnested-externs -Winline -Wvla -Wdisabled-optimization -Wmissing-prototypes -Wmissing-declarations")
    elseif(CMAKE_C_COMPILER_ID MATCHES "^MSVC$")
        if(CMAKE_C_FLAGS MATCHES "/W[0-4]")
            string(REGEX REPLACE "/W[0-4]" "/Wall" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
        else()
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Wall")
        endif()
    elseif(CMAKE_C_COMPILER_ID MATCHES "^Clang$")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=c89 -pedantic -Weverything")
    endif()
endif()

include_directories(${GLTRIANGLE_INCLUDE_DIRS})
add_executable(gltriangle WIN32 ${GLTRIANGLE_SOURCES} ${GLTRIANGLE_HEADERS})
target_link_libraries(gltriangle ${GLTRIANGLE_LIBRARIES})
